name: Build and Push to Docker Hub

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  IMAGE_NAME: tristar86/garmin-r10-dashboard

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: tristar86
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
        labels: |
          org.opencontainers.image.title=Garmin R10 Dashboard
          org.opencontainers.image.description=A Streamlit dashboard for analyzing Garmin R10 golf data
          org.opencontainers.image.url=https://github.com/${{ github.repository }}
          org.opencontainers.image.source=https://github.com/${{ github.repository }}
          org.opencontainers.image.version=${{ github.ref_name }}
          org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.licenses=MIT

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Create Docker Hub summary
      if: github.event_name != 'pull_request'
      run: |
        echo "## ðŸ“¦ Docker Image Published to Docker Hub" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Registry:** Docker Hub" >> $GITHUB_STEP_SUMMARY
        echo "**Image:** \`${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Tags:** " >> $GITHUB_STEP_SUMMARY
        echo '${{ steps.meta.outputs.tags }}' | sed 's/^/- `/' | sed 's/$/`/' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Usage:" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "docker pull ${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
        echo "docker run -p 8501:8501 -v \$(pwd)/data:/app/data ${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Digest:** \`${{ steps.build.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY

  deploy-to-kubernetes:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'

    steps:
    - name: Deploy to Kubernetes
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.KUBE_HOST }}
        username: ${{ secrets.KUBE_USERNAME }}
        password: ${{ secrets.KUBE_PASSWORD }}
        port: ${{ secrets.KUBE_PORT }}
        script_stop: true
        script: |

          # Verify SSH connection and server details
          echo "=== SSH Connection Verification ==="
          echo "Connected to server: $(hostname)"
          echo "Current user: $(whoami)"
          echo "Current directory: $(pwd)"
          echo "Server uptime: $(uptime)"
          echo "Date: $(date)"
          echo "=== End SSH Verification ==="

          # Debug: Check file system and permissions
          echo "=== Debugging KUBECONFIG ==="
          echo "HOME directory: $HOME"
          ls -la $HOME/.kube/ || echo "No .kube directory found"
          ls -la $HOME/.kube/config/ || echo "No config directory found"
          ls -la $HOME/.kube/config/k3s.yaml || echo "No k3s.yaml file found"
          whoami
          echo "=== End Debug ==="

          export KUBECONFIG=$HOME/.kube/config/k3s.yaml

          # Update the image in your Kubernetes deployment
          echo "Updating garmin-dashboard deployment image..."
          k3s kubectl set image deployment/garmin-dashboard garmin-dashboard=${{ env.IMAGE_NAME }}:${{ github.sha }} -n robert-prod
          
          # Wait for rollout to complete
          echo "Waiting for rollout..."
          k3s kubectl rollout status deployment/garmin-dashboard -n robert-prod
          
          # Verify the deployment
          echo "Verifying deployment..."
          k3s kubectl get pods -l app=garmin-dashboard -n robert-prod

          # Show deployment status
          echo "Deployment status:"
          k3s kubectl describe deployment garmin-dashboard -n robert-prod

          # Exit SSH
          exit

    - name: Create Kubernetes deployment summary
      run: |
        echo "## ðŸš€ Kubernetes Deployment Complete" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Deployment:** \`garmin-dashboard\`" >> $GITHUB_STEP_SUMMARY
        echo "**Namespace:** \`robert-prod\`" >> $GITHUB_STEP_SUMMARY
        echo "**Image:** \`${{ env.IMAGE_NAME }}:${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "The Garmin R10 Dashboard has been successfully deployed to Kubernetes!" >> $GITHUB_STEP_SUMMARY
